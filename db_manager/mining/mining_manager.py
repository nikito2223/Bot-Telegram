from telegram import Update
from telegram.ext import CallbackContext
import random
import time
import mysql.connector
import settings
from telegram.constants import ParseMode

async def mine(update: Update):
    user_id = update.effective_user.id
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    carpets = 1
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))    
    user_data = cursor.fetchone()
    conn.close()
    current_time = int(time.time())

    cooldown_time = current_time + 2 * 60 * 60  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    if user_data:
        cooldown = user_data[7]
        newbies = user_data[6]
        is_vip = user_data[8] == 1  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VIP-—Å—Ç–∞—Ç—É—Å
        vip_uses = user_data[9] if is_vip else 0

        if current_time < cooldown:
            remaining_time = cooldown - current_time
            if is_vip and vip_uses < 1:
                vip_uses += 1
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–±—ã—á—É –¥–ª—è VIP –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                amount = random.randint(5, 60)
                update_user(user_id, amount, 0, cooldown, vip_uses)  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º cooldown –¥–ª—è VIP
                await update.message.reply_text(
                    f"–í—ã –¥–æ–±—ã–ª–∏ üëæ{amount} –Ω–æ–≤–∏–∫–æ–≤."
                )

                if random.random() <= 0.05:
                   update_user(user_id, amount, carpets, cooldown_time, vip_uses)
                   await update.message.reply_text(
                       f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∫–æ–≤–∏–∫!"
                   )                   

                return
            else:
                await update.message.reply_text(
                    f"–î–æ–±—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞. \n–°–ª–µ–¥—É—é—â–∞—è –¥–æ–±—ã—á–∞ —á–µ—Ä–µ–∑ {remaining_time // 120 // 30} —á–∞—Å(–æ–≤) {remaining_time // 120 } –º–∏–Ω(—É—Ç)."
                )
                return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã
        amount = random.randint(5, 55)



        if random.random() <= 0.05:
            update_user(user_id, amount, carpets, cooldown_time, 0)
            await update.message.reply_text(
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∫–æ–≤–∏–∫!"
            )

        await update.message.reply_text(
            f"–í—ã –¥–æ–±—ã–ª–∏ üëæ{amount} –Ω–æ–≤–∏–∫–æ–≤."
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user(user_id, amount, 0, cooldown_time, 0)
    else:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–∂–∞–ª—É—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞ - **/start**")


def update_user(user_id, newbies, carpets, cooldown_time, vip_uses):
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO users (user_id, newbies, carpets, cooldown, vip_uses)
    VALUES (%s, %s, %s, %s, %s)
    ON DUPLICATE KEY UPDATE
        newbies = newbies + VALUES(newbies),
        carpets = carpets + VALUES(carpets),
        vip_uses = vip_uses + VALUES(vip_uses),
        cooldown = VALUES(cooldown) 
    """, (user_id, newbies, carpets, cooldown_time, vip_uses))
    conn.commit()
    conn.close()

async def balance(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    message = (
        f"ü¶ä**<b>–ö–æ–≤–∏–∫–∏: {user_data[5]}</b>\n"
        f"üëæ**<b>–ù–æ–≤–∏–∫–∏: {user_data[6]}</b>\n"
    )
    await update.message.reply_text(
            message,
            parse_mode=ParseMode.HTML
    )
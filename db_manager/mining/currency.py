from telegram import Update
from telegram.ext import ConversationHandler
import mysql.connector
import settings
from telegram.ext import ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_user_data(user_id):
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    return user_data

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
ITEMS_CATALOG = {
    "1": {"name": "ü¶ä–ö–æ–≤–∏–∫–∏", "price": 1000, "currency": "newbies", "buy-count": "yes", "action": "buy-carpet", "currency-trasform": "–ù–æ–≤–∏–∫–æ–≤üëæ"},
    "2": {"name": "–í–∏–ø", "price": 100, "currency": "carpets", "buy-count": "no", "action": "buy-vip", "currency-trasform": "–ö–æ–≤–∏–∫–æ–≤ü¶ä"}
}

CHOOSE_ITEM, ENTER_QUANTITY, BUY_VIP = range(3)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for item_id, item in ITEMS_CATALOG.items():
        button_text = f"{item['name']} - {item['price']} {item['currency-trasform']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=item_id)])

    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–∂–∞–ª—É—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞ - **/start**")
        return

    newbies = user_data.get("newbies", 0)
    carpets = user_data.get("carpets", 0)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å:\nüëæ–ù–æ–≤–∏–∫–∏: {newbies}\nü¶ä–ö–æ–≤–∏–∫–∏: {carpets}\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)
    return CHOOSE_ITEM

# –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
async def choose_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    item_id = query.data
    item = ITEMS_CATALOG.get(item_id)

    if not item:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    context.user_data["item_id"] = item_id
    context.user_data["action"] = item["action"]
    context.user_data["price"] = item["price"]
    context.user_data["currency"] = item["currency"]

    if item["buy-count"] == "no":
        await query.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {item['name']} –∑–∞ {item['price']} {item['currency']}? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
        )
        return ENTER_QUANTITY
    else:
        await query.edit_message_text(f"–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {item['name']}? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ENTER_QUANTITY

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
async def confirm_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    currency = context.user_data["currency"]
    balance = user_data[currency]
    price = context.user_data["price"]
    action = context.user_data["action"]

    user_response = update.message.text.lower()

    if action == "buy-vip":
        if user_response == "–¥–∞":
            if balance < price:
                await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {currency} –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏.")
                return ConversationHandler.END
            if user_data['is_vip'] == 0:
                await execute_action(user_id, action, 1)
                await update_balance(user_id, -price, currency)
                await assign_vip_status(user_id)
                await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ VIP —Å—Ç–∞—Ç—É—Å!")
            else:
                await update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∏–ø.")

        elif user_response == "–Ω–µ—Ç":
            await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
            return ENTER_QUANTITY


        return ConversationHandler.END
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        try:
            quantity = int(update.message.text)
            if quantity <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return ENTER_QUANTITY
    
        total_cost = price * quantity
    
        if balance < total_cost:
            await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {currency} –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏.")
            return ConversationHandler.END

        await execute_action(user_id, action, quantity)
        await update_balance(user_id, -total_cost, currency)
        await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {quantity} {ITEMS_CATALOG[context.user_data['item_id']]['name']}.")
        return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
async def execute_action(user_id, action, amount):
    if action == "buy-carpet":
        await update_balance(user_id, amount, "carpets")
        return True
    elif action == "buy-vip":
        await assign_vip_status(user_id)
        return True
    return False

async def assign_vip_status(user_id):
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET is_vip = 1 WHERE user_id = %s", (user_id,))
    conn.commit()
    conn.close()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def update_balance(user_id, amount, currency):
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor()

    if currency == "newbies":
        cursor.execute("UPDATE users SET newbies = newbies + %s WHERE user_id = %s", (amount, user_id))
    elif currency == "carpets":
        cursor.execute("UPDATE users SET carpets = carpets + %s WHERE user_id = %s", (amount, user_id))

    conn.commit()
    conn.close()

from telegram import Update
from telegram.ext import CallbackContext
from telegram.constants import ParseMode
import mysql.connector
import settings

import os

class DatabaseManager:
    def get_user_data(user_id):
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE user_id = %s", user_id)
        user_data = cursor.fetchone()
        conn.close()
        return user_data

    def create_table(self):
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,       # –õ–æ–≥–∏–Ω MySQL
            password=settings.Password,       # –ü–∞—Ä–æ–ª—å MySQL
            database=settings.Database  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        )
        cursor = conn.cursor()
        cursor.execute(''' 
            CREATE TABLE IF NOT EXISTS characters (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id BIGINT NOT NULL,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                health INT,
                abilities TEXT,
                skills TEXT,
                avatar VARCHAR(255),
                damage INT DEFAULT 0,
                weaknesses TEXT
            )
        ''')
        conn.commit()
        conn.close()
        
    def create_user_table(self):
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,       # –õ–æ–≥–∏–Ω MySQL
            password=settings.Password,       # –ü–∞—Ä–æ–ª—å MySQL
            database=settings.Database  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        )
        cursor = conn.cursor()
        cursor.execute(''' 
            CREATE TABLE IF NOT EXISTS users (                
                user_id BIGINT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                avatar VARCHAR(255) NOT NULL,
                status TEXT,
                number_characters INT
            )
        ''')
        conn.commit()
        conn.close()
        
    def save_character_to_db(character, user_id):
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
    
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID
            cursor.execute("SELECT id FROM available_ids ORDER BY id LIMIT 1")
            available_id = cursor.fetchone()
    
            if available_id:
                character_id = available_id[0]
                # –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                cursor.execute("DELETE FROM available_ids WHERE id = %s", (character_id,))
            else:
                # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                cursor.execute("SELECT IFNULL(MAX(id), 0) + 1 FROM characters")
                character_id = cursor.fetchone()[0]
    
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º ID
            cursor.execute('''INSERT INTO characters (id, user_id, name, description, health, abilities, skills, avatar, damage, weaknesses)
                              VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)''',
                           (character_id, user_id, character['name'], character['description'], character['health'],
                            character['abilities'], character['skills'], character['avatar'], character['damage'], character['weaknesses']))
            conn.commit()
    
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            cursor.execute("UPDATE users SET number_characters = number_characters + 1 WHERE user_id = %s", (user_id,))
            conn.commit()
    
            return character_id
        finally:
            cursor.close()
            conn.close()

    async def create_profile(update: Update, context: CallbackContext):
        user = update.message.from_user  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user.id
        user_name = user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫
        avatars_folder = "D:/wamp64/www/BotPerson/avatars/profile-users"
        os.makedirs(avatars_folder, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        default_avatar_path = os.path.join(avatars_folder, "default.jpg")
        avatar_path = os.path.join(avatars_folder, f"{user_id}.jpg")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
        user_data = cursor.fetchone()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            photos = await context.bot.get_user_profile_photos(user_id)
            if photos.total_count > 0 and len(photos.photos[0]) > 0:
                file_id = photos.photos[0][0].file_id
                file = await context.bot.get_file(file_id)
                await file.download_to_drive(avatar_path)
            else:
                avatar_path = default_avatar_path  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            avatar_path = default_avatar_path
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
        if not os.path.exists(avatar_path):
            avatar_path = default_avatar_path
    
        if not user_data:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
            cursor.execute(
                "INSERT INTO users (user_id, name, avatar, status, number_characters) VALUES (%s, %s, %s, %s, %s)",
                (user_id, user_name, avatar_path, "active", 0)
            )
            conn.commit()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

    async def top(update: Update, context: CallbackContext):
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        default_limit = 10
    
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        try:
            limit = int(context.args[0]) if context.args else default_limit
            if limit < 1:
                raise ValueError("Limit must be greater than 0.")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /top 5")
            return
    
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
    
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ `limit`
        cursor.execute("""
            SELECT name, status, number_characters
            FROM users
            ORDER BY number_characters DESC
            LIMIT %s
        """, (limit,))
        users = cursor.fetchall()
        conn.close()
    
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ø–æ–º
        if users:
            message = f"<b>üèÜ –¢–û–ü {limit} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ö–æ–ª–∏—á–µ—Å—Ç–≤—É –ö–∞—Ä—Ç–æ—á–µ–∫ üèÜ</b>\n\n"
            for rank, user in enumerate(users, start=1):
                name, status, number_characters = user
                message += (
                    f"<b>{rank}. {name}</b>\n"
                    f"   –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {number_characters}\n\n"
                )
        else:
            message = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞."
    
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.HTML
        )

    #/delete - 
    async def delete_character(update: Update, context: CallbackContext):
        if len(context.args) != 1:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /delete <id>.")
            return
    
        try:
            character_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
    
        user_id = update.message.from_user.id
    
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
    
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            cursor.execute("SELECT id FROM characters WHERE id=%s AND user_id=%s", (character_id, user_id))
            character = cursor.fetchone()
    
            if character is None:
                await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                return
    
            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            cursor.execute("DELETE FROM characters WHERE id=%s AND user_id=%s", (character_id, user_id))
            conn.commit()
    
            # –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π ID –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID
            cursor.execute("INSERT INTO available_ids (id) VALUES (%s)", (character_id,))
            conn.commit()
    
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            cursor.execute("UPDATE users SET number_characters = number_characters - 1 WHERE user_id = %s", (user_id,))
            conn.commit()
    
            await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        finally:
            cursor.close()
            conn.close()

    #/list
    async def list_characters(update: Update, context: CallbackContext):
    
        user_id = update.message.from_user.id  # Get the user ID of the person making the request
    
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM characters WHERE user_id=%s", (user_id,))
        characters = cursor.fetchall()
        conn.close()
    
        if characters:
            response = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:\n"
            for character in characters:
                response += f"üÜî {character[0]} - {character[1]}\n"
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
    #/show -
    async def show_character(update: Update, context: CallbackContext):
        if len(context.args) != 1:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /show <id>.")
            return
    
        try:
            character_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
    
        user_id = update.message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–∂–µ—Ç –ª–∏ –æ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        cursor.execute("SELECT can_view_all_characters FROM admins WHERE user_id = %s", (user_id,))
        admin_data = cursor.fetchone()
        can_view_all = admin_data[0] if admin_data else False
    
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤ `users`
        cursor.execute("SELECT status FROM users WHERE user_id = %s", (user_id,))
        user_status = cursor.fetchone()
        if user_status:
            user_status = user_status[0]
        else:
            user_status = None
    
        # –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç—É–ø–∞
        if can_view_all:
            # –ú–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            cursor.execute("SELECT * FROM characters WHERE id=%s", (character_id,))
        else:
            # –ú–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
            cursor.execute("SELECT * FROM characters WHERE id=%s AND user_id=%s", (character_id, user_id))
    
        character = cursor.fetchone()
        conn.close()
    
        if character:
            avatar_path = character[7]  # 8-–π —Å—Ç–æ–ª–±–µ—Ü ‚Äî –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É
            user_folder = "D:/wamp64/www/BotPerson/avatars/"
            no_avatar_path = os.path.join(user_folder, "NoAvatarce.jpg")
    
            message = (
                f"<b>–ü–µ—Ä—Å–æ–Ω–∞–∂:</b> {character[2]}\n\n"
                f"<b>üÜîID:</b> {character[0]}\n"
                f"<b>üè∑Ô∏è–ò–º—è:</b> {character[2]}\n"
                f"<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ:</b> {character[3]}\n"
                f"<b>‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ:</b> {character[4]}\n"
                f"<b>üî™–£—Ä–æ–Ω:</b> {character[8]}\n"
                f"<b>üß†–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</b> {character[5]}\n"
                f"<b>‚öíÔ∏è–ù–∞–≤—ã–∫–∏:</b> {character[6]}\n"
                f"<b>üòµ–°–ª–∞–±–æ—Å—Ç–∏:</b> {character[9]}\n"
            )
    
            if os.path.exists(avatar_path):
                with open(avatar_path, 'rb') as avatar_file:
                    await update.message.reply_photo(
                        photo=avatar_file,
                        caption=message,
                        parse_mode=ParseMode.HTML
                    )
            else:
                with open(no_avatar_path, 'rb') as no_avatar_file:
                    await update.message.reply_photo(
                        photo=no_avatar_file,
                        caption=message,
                        parse_mode=ParseMode.HTML
                    )
        else:
            await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—Å.")

    async def glist_characters(update: Update, context: CallbackContext):
        user_id = update.message.from_user.id  # Get the user ID of the person making the request
        
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
    
        # Retrieve the user's name (nickname) from the users table
        cursor.execute("SELECT name, status FROM users WHERE user_id=%s", (user_id,))
        user_name = cursor.fetchone()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–∂–µ—Ç –ª–∏ –æ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        cursor.execute("SELECT can_view_all_characters FROM admins WHERE user_id = %s", (user_id,))
        admin_data = cursor.fetchone()
        can_view_all = admin_data[0] if admin_data else False
        user_status = cursor.fetchone()
        
        if can_view_all:
            if user_status:
                user_status = user_status[0]
            else:
                user_status = None
            
            if user_name:
                # Get the list of characters for the user
                cursor.execute("""
                    SELECT users.name, users.user_id, characters.id, characters.name 
                    FROM characters 
                    JOIN users ON characters.user_id = users.user_id
                    ORDER BY users.name, characters.name
                """)
                characters = cursor.fetchall()
                
                if characters:
                    response = "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:\n"
                    current_user = None  # To track when the user changes
                    
                    for character in characters:
                        user_name, user_id, character_id, character_name = character
                        
                        # If the user changes, add their name as a header
                        if user_name != current_user:
                            if current_user:  # Add a separator for the next user
                                response += "\n"
                            response += f"{user_name} (ID: {user_id}):\n"
                            current_user = user_name
                        
                        # List the character under the user, including the character's ID
                        response += f"  - {character_name} - {character_id}\n"
                    
                    await update.message.reply_text(response)
                else:
                    await update.message.reply_text("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        conn.close()

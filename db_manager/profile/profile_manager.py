import mysql.connector

from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ReplyKeyboardRemove

import settings
import os

CHOOSE_AVATAR, UPLOAD_AVATAR = range(2)

def get_total_characters(user_id):
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor()

    cursor.execute("SELECT number_characters FROM users WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()

    conn.close()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    return 0  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def show_user_profile(update: Update, context: CallbackContext):
        user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        vip_status = ''
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
        user_data = cursor.fetchone()
        conn.close()
        
        if user_data:
            avatar_path = user_data[2]
            if user_data[8] == 0:
                vip_status = '–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç' 
            elif user_data[8] == 1:
                vip_status = "–ò–º–µ–µ—Ç—Å—è"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with open(avatar_path, 'rb') as avatar_file:
                message = (
                        f"üë§ **<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data[1]}</b>\n"
                        f"üëë**<b>–°—Ç–∞—Ç—É—Å: {user_data[3]}</b>\n"
                        f"üíé**<b>–í–∏–ø: {vip_status}</b>\n"
                        f"üë•**<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {user_data[4]}</b>\n"
                        f"ü¶ä**<b>–ö–æ–≤–∏–∫–∏: {user_data[5]}</b>\n"
                    )
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É", callback_data="change_avatar")],
                ])
                #reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_photo(
                    photo=avatar_file,
                    reply_markup=keyboard,
                    caption = message,   
                    parse_mode="HTML"
                )

                return CHOOSE_AVATAR
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
            await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–∂–∞–ª—É—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞ - **/start**")

    
async def choose_avatar(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π!
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    return UPLOAD_AVATAR

async def handle_new_avatar(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    photo = update.message.photo

    if not photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return UPLOAD_AVATAR

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo_file = photo[-1]
    file = await context.bot.get_file(photo_file.file_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –ø–∞–ø–∫—É
    avatar_folder = "D:/wamp64/www/BotPerson/avatars/profile-users"
    os.makedirs(avatar_folder, exist_ok=True)
    new_avatar_path = os.path.join(avatar_folder, f"{user_id}.jpg")

    await file.download_to_drive(new_avatar_path)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = mysql.connector.connect(
        host=settings.Host, user=settings.User, password=settings.Password, database=settings.Database
    )
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET avatar = %s WHERE user_id = %s", (new_avatar_path, user_id))
    conn.commit()
    conn.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
    await update.message.reply_text("–í–∞—à –∞–≤–∞—Ç–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    return ConversationHandler.END


async def remove_buttons(update: Update):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        await update.message.reply_text("–í–∞—à –∞–≤–∞—Ç–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=ReplyKeyboardRemove())

async def edit_status(update: Update, context: CallbackContext):
    
        userId = update.message.from_user.id
        conn = mysql.connector.connect(
            host=settings.Host,
            user=settings.User,
            password=settings.Password,
            database=settings.Database
        )
        cursor = conn.cursor()
        
        cursor.execute("SELECT can_edit_status FROM admins WHERE user_id = %s", (userId,))
        admin_data = cursor.fetchone()
        can_edit_status = admin_data[0] if admin_data else False
        user_status = cursor.fetchone()
    
        if len(context.args) != 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /editStatus <user_id> <new_status>")
            return
    
        try:
            user_id = int(context.args[0])  # –ü–æ–ª—É—á–∞–µ–º user_id
            new_status = context.args[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /editStatus <user_id> <new_status>")
            return
    
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        
        if can_edit_status:
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
            cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
            user_data = cursor.fetchone()
        
            if user_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("UPDATE users SET status = %s WHERE user_id = %s", (new_status, user_id))
                conn.commit()
                await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'.")
            else:
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!")
    
        conn.close()

async def show_profile(update: Update, context: CallbackContext):
    userId = update.message.from_user.id
    vip_status = ''
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = None

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    elif context.args:
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /ShowProfile 12345")
            return

    # –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @
    elif update.message.entities:
        for entity in update.message.entities:
            if entity.type == "mention":
                mentioned_username = update.message.text[entity.offset + 1:entity.offset + entity.length]
                target_user = await context.bot.get_chat_member(update.effective_chat.id, userId)
                if target_user and target_user.user.username == mentioned_username:
                    target_user_id = target_user.user.id
                    break

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not target_user_id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ ID –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ @.")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor(dictionary=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    cursor.execute("SELECT can_profile_check FROM admins WHERE user_id = %s", (userId,))
    admin_data = cursor.fetchone()
    can_profile_check = admin_data["can_profile_check"] if admin_data else False

    if not can_profile_check:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.")
        conn.close()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM users WHERE user_id = %s", (target_user_id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        avatar_path = user_data.get("avatar", None)

        if user_data['is_vip'] == 0:
            vip_status = '–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç'
        elif user_data['is_vip'] == 1:
            vip_status = "–ò–º–µ–µ—Ç—Å—è"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        message = (
            f"üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_data['name']}\n"
            f"üëë <b>–°—Ç–∞—Ç—É—Å:</b> {user_data['status']}\n"
            f"üíé <b>–í–∏–ø :</b> {vip_status}\n"
            f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:</b> {user_data['number_characters']}"
        )

        if avatar_path:
            with open(avatar_path, 'rb') as avatar_file:
                await update.message.reply_photo(
                    photo=avatar_file,
                    caption=message,
                    parse_mode="HTML"
                )
        else:
            await update.message.reply_text(message, parse_mode="HTML")
    else:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    if query.data == "change_avatar":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞.")
    elif query.data == "view_profile":
        await query.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ...")

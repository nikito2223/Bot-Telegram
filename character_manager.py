from db_manager.db_manager import DatabaseManager
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from telegram.constants import ParseMode
import settings
import mysql.connector
import os

import datetime

db = DatabaseManager()
AVATAR, NAME, DESCRIPTION, HEALTH, ABILITIES, SKILLS, DAMAGE, WEAKNESSES = range(8)

def is_action_allowed(user_id, action, limit, vip_status):

    if vip_status:
        return True, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–ª–∞–≥–æ–¥–∞—Ä—è VIP-—Å—Ç–∞—Ç—É—Å—É."

    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor(dictionary=True)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    limit_time = datetime.datetime.now() - datetime.timedelta(hours=24)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    cursor.execute(
        """
        SELECT COUNT(*) as action_count 
        FROM user_actions 
        WHERE user_id = %s AND action = %s AND timestamp > %s
        """,
        (user_id, action, limit_time)
    )
    result = cursor.fetchone()
    conn.close()

    action_count = result["action_count"] if result else 0

    if action_count >= limit:
        return False, "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."

    return True, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ."

def log_user_action(user_id, action):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param action: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "buy_card")
    """
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    cursor.execute(
        "INSERT INTO user_actions (user_id, action, timestamp) VALUES (%s, %s, %s)",
        (user_id, action, datetime.datetime.now())
    )
    conn.commit()
    conn.close()


async def create(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    action = "create_character"
    limit = 10

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = DatabaseManager.get_user_data(user_id)
    vip_status = user_data[8] = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    allowed, message = is_action_allowed(user_id, action, limit, vip_status)

    if not allowed:
        await update.message.reply_text(message)
        return ConversationHandler.END

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
    log_user_action(user_id, action)

    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä–∫—É –±—É–¥—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return AVATAR

    
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.\n"
        "/profile - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è üë§\n"
        "/create - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚úçÔ∏è\n"
        "/list - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π üìú\n"
        "/show <id> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ üìñ\n"
        "/delete <id> - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚ùå\n"
        "/top - –¢–æ–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º üë•"
    )
    await DatabaseManager.create_profile(update,context)         

async def avatar(update: Update, context: CallbackContext):
    # Ensure the user sent an image
    if update.message.photo:
        # Get the highest quality photo (last in the list of photo sizes)
        file = await update.message.photo[-1].get_file()

        # Create a folder for the user's ID
        user_id = update.message.from_user.id
        user_folder = f"D:/wamp64/www/BotPerson/avatars/temp/temp_{user_id}"
        os.makedirs(user_folder, exist_ok=True)

        # Specify a temporary name for the file path
        temp_avatar_path = os.path.join(user_folder, f"temp_{user_id}_avatar.jpg")

        # Download the file asynchronously and save it to the specified path
        await file.download_to_drive(temp_avatar_path)

        # Store the temporary file path in the user data for later use
        context.user_data['temp_avatar'] = temp_avatar_path

        # Prompt for name next
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return NAME
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return AVATAR

# Handle the character name input
async def name(update: Update, context: CallbackContext):
    user_name = update.message.text.strip()
    user_id = update.message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = mysql.connector.connect(
        host=settings.Host,
        user=settings.User,
        password=settings.Password,
        database=settings.Database
    )
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "SELECT COUNT(*) FROM characters WHERE name = %s AND user_id = %s",
        (user_name, user_id)
    )
    result = cursor.fetchone()
    if result[0] > 0:
        # –ï—Å–ª–∏ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        # –ï—Å–ª–∏ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –∏–º–µ–Ω–µ–º '{user_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è."
        )
        conn.close()
        return NAME

    # –ï—Å–ª–∏ –∏–º—è —É–Ω–∏–∫–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    context.user_data['name'] = user_name

    # Get the temporary avatar path
    temp_avatar_path = context.user_data.get('temp_avatar')
    if temp_avatar_path:
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_folder = f"D:/wamp64/www/BotPerson/avatars/{user_id}"
        os.makedirs(user_folder, exist_ok=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        new_avatar_path = os.path.join(user_folder, f"{user_name}_avatar.jpg")

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if os.path.exists(new_avatar_path):
            os.remove(new_avatar_path)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.rename(temp_avatar_path, new_avatar_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É
        context.user_data['avatar'] = new_avatar_path

    else:
        await update.message.reply_text("–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        conn.close()
        return AVATAR

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
    conn.close()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return DESCRIPTION

# Handle the character description input
async def description(update: Update, context: CallbackContext):
    user_description = update.message.text
    context.user_data['description'] = user_description
    await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return HEALTH

# Handle the character health input
async def health(update: Update, context: CallbackContext):
    try:
        user_health = int(update.message.text)
        context.user_data['health'] = user_health
        if(user_health > settings.MAX_HEALTH):
            await update.message.reply_text(f"–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –ø–æ–∂–∞–ª—É—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å—è –¥–æ {settings.MAX_HEALTH}.")
            return HEALTH
        else:
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return DAMAGE
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è. –ù–µ –±—É–∫–∞–º–∏")
        return HEALTH

async def damage(update: Update, context: CallbackContext):
    try:
        user_damage = int(update.message.text)
        context.user_data['damage'] = user_damage
        if(user_damage > settings.MAX_HEALTH):
            await update.message.reply_text(f"–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –ø–æ–∂–∞–ª—É—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —É—Ä–æ–Ω–∞ –¥–æ {settings.MAX_DAMAGE}.")
            return DAMAGE
        else:
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–∞–±–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return WEAKNESSES
            
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–Ω. –ù–µ –±—É–∫–∞–º–∏")
        return DAMAGE
        
# Handle the character abilities input
async def abilities(update: Update, context: CallbackContext):
    user_abilities = update.message.text
    context.user_data['abilities'] = user_abilities
    await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return SKILLS
    
async def weaknesses(update: Update, context: CallbackContext):
    user_weaknesses = update.message.text
    context.user_data['weaknesses'] = user_weaknesses
    await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return ABILITIES

# Handle the character skills input
async def skills(update: Update, context: CallbackContext):
    user_skills = update.message.text
    context.user_data['skills'] = user_skills

    # Save the character to the database
    character = context.user_data
    user_id = update.message.from_user.id  # Get the user ID for saving the character
    character_id = DatabaseManager.save_character_to_db(character, user_id)  # –ü–µ—Ä–µ–¥–∞—á–∞ user_id –≤ —Ñ—É–Ω–∫—Ü–∏—é


    # Send confirmation message with the character info
    message = (
        f"<b>–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"<b>üÜîID:</b> {character_id}\n"  # Include the new ID in the message
        f"<b>üè∑Ô∏è–ò–º—è:</b> {character['name']}\n"
        f"<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ:</b> {character['description']}\n"
        f"<b>‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ:</b> {character['health']}\n"
        f"<b>üî™–£—Ä–æ–Ω:</b> {character['damage']}\n"
        f"<b>üß†–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</b> {character['abilities']}\n"
        f"<b>‚öíÔ∏è–ù–∞–≤—ã–∫–∏:</b> {character['skills']}\n\n"
        f"<b>üòµ–°–ª–∞–±–æ—Å—Ç–∏:</b> {character['weaknesses']}\n\n"
    )

    # Send the avatar image first
    with open(character['avatar'], 'rb') as avatar_file:
        await update.message.reply_photo(
            photo=avatar_file,
            caption=message,  # Include the character info message
            parse_mode=ParseMode.HTML  # Use HTML for rich text formatting
        )

    await update.message.reply_text(
        "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
    )

    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END
